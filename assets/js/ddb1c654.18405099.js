"use strict";(self.webpackChunkengineering_standards=self.webpackChunkengineering_standards||[]).push([[8055],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,k=c["".concat(s,".").concat(u)]||c[u]||d[u]||l;return n?a.createElement(k,o(o({ref:t},m),{},{components:n})):a.createElement(k,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2625:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={},o="Casing Conventions",i={unversionedId:"general/casing-conventions",id:"general/casing-conventions",title:"Casing Conventions",description:"Adapted from Google Javascript naming conventions;",source:"@site/docs/general/casing-conventions.md",sourceDirName:"general",slug:"/general/casing-conventions",permalink:"/docs/general/casing-conventions",draft:!1,editUrl:"https://github.com/radically-digital/radically-digital.github.io/tree/main/docs/docs/general/casing-conventions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"12 Factor App Checklist",permalink:"/docs/general/factor-app-checklist"},next:{title:"A Good README",permalink:"/docs/general/good-readme"}},s={},p=[{value:"Definitions",id:"definitions",level:2},{value:"Filenames",id:"filenames",level:2},{value:"Exceptions for consistency",id:"exceptions-for-consistency",level:3},{value:"Other exceptions",id:"other-exceptions",level:3},{value:"Package names",id:"package-names",level:2},{value:"Class names",id:"class-names",level:2},{value:"Method names",id:"method-names",level:2},{value:"Enum names",id:"enum-names",level:2},{value:"Constant names",id:"constant-names",level:2},{value:"Definition of &quot;constant&quot;",id:"definition-of-constant",level:3},{value:"Local aliases",id:"local-aliases",level:3},{value:"Non-constant field names",id:"non-constant-field-names",level:2},{value:"Parameter names",id:"parameter-names",level:2},{value:"Local variable names",id:"local-variable-names",level:2},{value:"Template parameter names",id:"template-parameter-names",level:2},{value:"Module-local names",id:"module-local-names",level:2},{value:"Camel case: defined",id:"camel-case-defined",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"casing-conventions"},"Casing Conventions"),(0,r.kt)("p",null,"Adapted from ",(0,r.kt)("a",{parentName:"p",href:"https://google.github.io/styleguide/jsguide.html#naming"},"Google Javascript naming conventions"),";"),(0,r.kt)("h2",{id:"definitions"},"Definitions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Case"),(0,r.kt)("th",{parentName:"tr",align:null},"Example file"),(0,r.kt)("th",{parentName:"tr",align:null},"Example Variable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"camelCase"),(0,r.kt)("td",{parentName:"tr",align:null},"fileName.ts"),(0,r.kt)("td",{parentName:"tr",align:null},"myVariable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PascalCase or UpperCamelCase"),(0,r.kt)("td",{parentName:"tr",align:null},"FileName.ts"),(0,r.kt)("td",{parentName:"tr",align:null},"MyVariable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"kebab-case"),(0,r.kt)("td",{parentName:"tr",align:null},"file-name.ts"),(0,r.kt)("td",{parentName:"tr",align:null},"my-variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"snake_case"),(0,r.kt)("td",{parentName:"tr",align:null},"file_name.ts"),(0,r.kt)("td",{parentName:"tr",align:null},"my_variable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CONTANT_CASE or UPPER_SNAKE_CASE"),(0,r.kt)("td",{parentName:"tr",align:null},"FILE_NAME.ts"),(0,r.kt)("td",{parentName:"tr",align:null},"MY_VARIABLE")))),(0,r.kt)("h2",{id:"filenames"},"Filenames"),(0,r.kt)("p",null,"Make file and directory names ",(0,r.kt)("inlineCode",{parentName:"p"},"kebab-case"),". Use hyphens, not underscores, to separate words\u2014for example, query-data.html. Use only standard ASCII alphanumeric characters in file and directory names."),(0,r.kt)("h3",{id:"exceptions-for-consistency"},"Exceptions for consistency"),(0,r.kt)("p",null,"If you're adding to a directory where everything else already uses underscores, and it's not feasible to change everything to hyphens, it's okay to use underscores to stay consistent."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For example, if the directory already has ",(0,r.kt)("inlineCode",{parentName:"p"},"lesson_1.jd"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lesson_2.jd"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"lesson_3.jd"),", it's okay to add your new file as ",(0,r.kt)("inlineCode",{parentName:"p"},"lesson_4.jd")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"lesson-4.jd"),". However, in all other situations, use hyphens.")),(0,r.kt)("p",null,"Recommended: avoiding-cliches.js\nSometimes OK: avoiding_cliches.js\nNot recommended: avoidingcliches.js\nNot recommended: avoidingCliches.js\nNot recommended: avoiding-clich\xe9s.js"),(0,r.kt)("p",null,"Avoid pascal case for file names as some Operation Systems ignore capitalization. ",(0,r.kt)("inlineCode",{parentName:"p"},"FileName.js")," would be the equivalent of ",(0,r.kt)("inlineCode",{parentName:"p"},"fileName.js"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filename.js")," or any variation ",(0,r.kt)("inlineCode",{parentName:"p"},"FileNAMe.js")),(0,r.kt)("h3",{id:"other-exceptions"},"Other exceptions"),(0,r.kt)("p",null,"It's okay to have some inconsistency in filenames if it can't otherwise be avoided. For example, sometimes tools that generate reference documentation produce filenames based on different style requirements or based on the design and naming conventions of the product or API itself. In those cases, it's okay to make exceptions for those files."),(0,r.kt)("h2",{id:"package-names"},"Package names"),(0,r.kt)("p",null,"Package names are all ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase")),(0,r.kt)("h2",{id:"class-names"},"Class names"),(0,r.kt)("p",null,"Class, interface, record, and typedef names are written in ",(0,r.kt)("inlineCode",{parentName:"p"},"UpperCamelCase")),(0,r.kt)("p",null,"Type names are typically nouns or noun phrases. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"Request"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ImmutableList"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"VisibilityMode"),". Additionally, interface names may sometimes be adjectives or adjective phrases instead (for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"Readable"),")."),(0,r.kt)("h2",{id:"method-names"},"Method names"),(0,r.kt)("p",null,"Method names are written in ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase"),". Names for private methods should start with an underscore."),(0,r.kt)("p",null,"Method names are typically verbs or verb phrases. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"sendMessage")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"_stop"),". Getter and setter methods for properties are never required, but if they are used they should be named ",(0,r.kt)("inlineCode",{parentName:"p"},"getFoo")," (or optionally ",(0,r.kt)("inlineCode",{parentName:"p"},"isFoo")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"hasFoo")," for booleans), or ",(0,r.kt)("inlineCode",{parentName:"p"},"setFoo(value)")," for setters."),(0,r.kt)("p",null,"Underscores may also appear in JsUnit test method names to separate logical components of the name. One typical pattern is ",(0,r.kt)("inlineCode",{parentName:"p"},"test<MethodUnderTest>_<state>_<expectedOutcome>"),", for example ",(0,r.kt)("inlineCode",{parentName:"p"},"testPop_emptyStack_throws"),". There is no One Correct Way to name test methods."),(0,r.kt)("h2",{id:"enum-names"},"Enum names"),(0,r.kt)("p",null,"Enum names are written in ",(0,r.kt)("inlineCode",{parentName:"p"},"UpperCamelCase"),", similar to classes, and should generally be singular nouns. Individual items within the enum are named in ",(0,r.kt)("inlineCode",{parentName:"p"},"CONSTANT_CASE"),"."),(0,r.kt)("h2",{id:"constant-names"},"Constant names"),(0,r.kt)("p",null,"Constant names use ",(0,r.kt)("inlineCode",{parentName:"p"},"CONSTANT_CASE"),": all uppercase letters, with words separated by underscores. There is no reason for a private constant to be named with a leading underscore, since private static properties can be replaced by (implicitly private) module locals."),(0,r.kt)("h3",{id:"definition-of-constant"},'Definition of "constant"'),(0,r.kt)("p",null,"Every constant is a ",(0,r.kt)("inlineCode",{parentName:"p"},"@const")," static property or a module-local ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," declaration, but not all ",(0,r.kt)("inlineCode",{parentName:"p"},"@const")," static properties and module-local ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),"s are constants. Before choosing constant case, consider whether the field really feels like a ",(0,r.kt)("em",{parentName:"p"},"deeply immutable")," constant. For example, if any of that instance's observable state can change, it is almost certainly not a constant. Merely intending to never mutate the object is generally not enough."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Constants\nconst NUMBER = 5;\n/** @const */ exports.NAMES = ImmutableList.of('Ed', 'Ann');\n/** @enum */ exports.SomeEnum = { ENUM_CONSTANT: 'value' };\n\n// Not constants\nlet letVariable = 'non-const';\nclass MyClass { constructor() { /** @const {string} */ this.nonStatic = 'non-static'; } };\n/** @type {string} */ MyClass.staticButMutable = 'not @const, can be reassigned';\nconst /** Set<string> */ mutableCollection = new Set();\nconst /** ImmutableSet<SomeMutableType> */ mutableElements = ImmutableSet.of(mutable);\nconst Foo = goog.require('my.Foo');  // mirrors imported name\nconst logger = log.getLogger('loggers.are.not.immutable');```\n")),(0,r.kt)("p",null,"Constants\u2019 names are typically nouns or noun phrases."),(0,r.kt)("h3",{id:"local-aliases"},"Local aliases"),(0,r.kt)("p",null,"Local aliases should be used whenever they improve readability over fully-qualified names. Aliases may also be used within functions. Aliases must be ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),"."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const staticHelper = importedNamespace.staticHelper;\nconst CONSTANT_NAME = ImportedClass.CONSTANT_NAME;\nconst { assert, assertInstanceof } = asserts;\n")),(0,r.kt)("h2",{id:"non-constant-field-names"},"Non-constant field names"),(0,r.kt)("p",null,"Non-constant field names (static or otherwise) are written in ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase"),", with a leading underscore for private fields."),(0,r.kt)("p",null,"These names are typically nouns or noun phrases. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"computedValues")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"_index"),"."),(0,r.kt)("h2",{id:"parameter-names"},"Parameter names"),(0,r.kt)("p",null,"Parameter names are written in ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase"),". Note that this applies even if the parameter expects a constructor."),(0,r.kt)("p",null,"One-character parameter names should not be used in public methods."),(0,r.kt)("p",null,"Exception: When required by a third-party framework, parameter names may begin with a ",(0,r.kt)("inlineCode",{parentName:"p"},"$"),". This exception does not apply to any other identifiers (e.g. local variables or properties)."),(0,r.kt)("h2",{id:"local-variable-names"},"Local variable names"),(0,r.kt)("p",null,"Local variable names are written in ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase"),", except for module-local (top-level) constants, as described above. Constants in function scopes are still named in ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase"),". Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"lowerCamelCase")," is used even if the variable holds a constructor."),(0,r.kt)("h2",{id:"template-parameter-names"},"Template parameter names"),(0,r.kt)("p",null,"Template parameter names should ideally be concise, single-word or single-letter identifiers, and must be ",(0,r.kt)("inlineCode",{parentName:"p"},"CONSTANT_CASE"),", such as ",(0,r.kt)("inlineCode",{parentName:"p"},"TYPE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"THIS"),"."),(0,r.kt)("h2",{id:"module-local-names"},"Module-local names"),(0,r.kt)("p",null,"Module-local names that are not exported are implicitly private. They are not marked ",(0,r.kt)("inlineCode",{parentName:"p"},"@private")," and do not start with an underscore. This applies to classes, functions, variables, constants, enums, and other module-local identifiers."),(0,r.kt)("h2",{id:"camel-case-defined"},"Camel case: defined"),(0,r.kt)("p",null,"Sometimes there is more than one reasonable way to convert an English phrase into camel case, such as when acronyms or unusual constructs like IPv6 or iOS are present. To improve predictability, Google Style specifies the following (nearly) deterministic scheme."),(0,r.kt)("p",null,"Beginning with the prose form of the name:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Convert the phrase to plain ASCII and remove any apostrophes. For example, M\xfcller's algorithm might become Muellers algorithm."),(0,r.kt)("li",{parentName:"ol"},"Divide this result into words, splitting on spaces and any remaining punctuation (typically hyphens).",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Recommended: if any word already has a conventional camel case appearance in common usage, split this into its constituent parts (e.g., AdWords becomes ad words). Note that a word such as iOS is not really in camel case per se; it defies any convention, so this recommendation does not apply."))),(0,r.kt)("li",{parentName:"ol"},"Now lowercase everything (including acronyms), then uppercase only the first character of:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"each word, to yield upper camel case, or"),(0,r.kt)("li",{parentName:"ol"},"each word except the first, to yield lower camel case"))),(0,r.kt)("li",{parentName:"ol"},"Finally, join all the words into a single identifier.")),(0,r.kt)("p",null,"Note that the casing of the original words is almost entirely disregarded."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Prose form"),(0,r.kt)("th",{parentName:"tr",align:null},"Correct"),(0,r.kt)("th",{parentName:"tr",align:null},"Incorrect"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"XML HTTP request"),(0,r.kt)("td",{parentName:"tr",align:null},"XmlHttpRequest"),(0,r.kt)("td",{parentName:"tr",align:null},"XMLHTTPRequest")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"new customer ID"),(0,r.kt)("td",{parentName:"tr",align:null},"newCustomerId"),(0,r.kt)("td",{parentName:"tr",align:null},"newCustomerID")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"inner stopwatch"),(0,r.kt)("td",{parentName:"tr",align:null},"innerStopwatch"),(0,r.kt)("td",{parentName:"tr",align:null},"innerStopWatch")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"supports IPv6 on iOS?"),(0,r.kt)("td",{parentName:"tr",align:null},"supportsIpv6OnIos"),(0,r.kt)("td",{parentName:"tr",align:null},"supportsIPv6OnIOS")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"YouTube importer"),(0,r.kt)("td",{parentName:"tr",align:null},"YouTubeImporter"),(0,r.kt)("td",{parentName:"tr",align:null},"YoutubeImporter","*")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Acceptable, but not recommended.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: Some words are ambiguously hyphenated in the English language: for example nonempty and non-empty are both correct, so the method names checkNonempty and checkNonEmpty are likewise both correct.")))}d.isMDXComponent=!0}}]);